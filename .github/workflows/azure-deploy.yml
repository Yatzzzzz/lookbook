name: Deploy to Azure Web App

on:
  push:
    branches:
      - main
      - new-main
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'    # Set Node.js version
  AZURE_WEBAPP_NAME: lookbook-nextjs-app   # Set this to your Azure Web App name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # Set this to the path to your web app project, defaults to the repository root

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Build Environment
        run: |
          # Create environment variables
          echo "CI=true" >> .env.local
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_URL=https://wwjuohjstrcyvshfuadr.supabase.co" >> .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.local
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.local
          echo "GOOGLE_APPLICATION_CREDENTIALS=./dummy-credentials.json" >> .env.local
          echo "NEXT_PUBLIC_WEBSOCKET_URL=wss://lookbook-nextjs-app.azurewebsites.net/api/gemini-live" >> .env.local
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.local
          echo "KLINGAI_ACCESS_KEY=${{ secrets.KLINGAI_ACCESS_KEY }}" >> .env.local
          echo "KLINGAI_SECRET_KEY=${{ secrets.KLINGAI_SECRET_KEY }}" >> .env.local
          echo "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" >> .env.local
          echo "AZURE_OPENAI_ENDPOINT=https://ai-itzikzabarsky2812ai950890111340.openai.azure.com/" >> .env.local
          echo "AZURE_OPENAI_MODEL=gpt-4o" >> .env.local
          echo "AZURE_OPENAI_DEPLOYMENT=lookbookAIGPT4o" >> .env.local
          echo "AZURE_OPENAI_API_VERSION=2024-04-01-preview" >> .env.local
          
          # Create dummy credentials
          echo "{}" > ./dummy-credentials.json
          
          # Clean any existing files
          rm -f package-lock.json
          rm -f yarn.lock
          rm -rf node_modules
          rm -rf .next

      - name: Install Dependencies
        run: |
          # Install all dependencies including dev dependencies for proper build
          npm install
          
      - name: Create Next.js Configuration
        run: |
          # Create optimized next.config.js for production build
          cat > next.config.js << 'EOL'
          module.exports = {
            eslint: { 
              ignoreDuringBuilds: true 
            },
            typescript: {
              ignoreBuildErrors: true
            },
            output: 'standalone',
            serverExternalPackages: ['@supabase/supabase-js'],
            images: {
              unoptimized: true
            }
          };
          EOL

      - name: Build Next.js Application
        run: |
          # Ensure we have fallback Supabase keys for build time
          # These are only used during static generation and will be replaced at runtime
          FALLBACK_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind3anVvaGpzdHJjeXZzaGZ1YWRyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM0NTYzMTQsImV4cCI6MjA1OTAzMjMxNH0.9frcwfcg4fXq_nGAQ2axdPpYcBsxcPspGvXz2bGTTEI"
          FALLBACK_SERVICE_ROLE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind3anVvaGpzdHJjeXZzaGZ1YWRyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MzQ1NjMxNCwiZXhwIjoyMDU5MDMyMzE0fQ.8pL_0gkrX1gIBA-gXMUywcS8Nc7t-m1vh3vKCJEyhgk"
          
          # Use the secrets if available, otherwise use the fallbacks
          SUPABASE_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"
          SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          
          if [ -z "$SUPABASE_KEY" ]; then
            SUPABASE_KEY="$FALLBACK_ANON_KEY"
            echo "Using fallback Supabase anon key for build"
          fi
          
          if [ -z "$SERVICE_ROLE_KEY" ]; then
            SERVICE_ROLE_KEY="$FALLBACK_SERVICE_ROLE_KEY"
            echo "Using fallback Supabase service role key for build"
          fi
          
          # Build with environment variables explicitly passed
          NEXT_PUBLIC_SUPABASE_URL=https://wwjuohjstrcyvshfuadr.supabase.co \
          NEXT_PUBLIC_SUPABASE_ANON_KEY=$SUPABASE_KEY \
          SUPABASE_SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY \
          KLINGAI_ACCESS_KEY=${{ secrets.KLINGAI_ACCESS_KEY }} \
          KLINGAI_SECRET_KEY=${{ secrets.KLINGAI_SECRET_KEY }} \
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
          AZURE_OPENAI_ENDPOINT=https://ai-itzikzabarsky2812ai950890111340.openai.azure.com/ \
          AZURE_OPENAI_MODEL=gpt-4o \
          AZURE_OPENAI_DEPLOYMENT=lookbookAIGPT4o \
          AZURE_OPENAI_API_VERSION=2024-04-01-preview \
          npx next build
        env:
          CI: true
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: "--max-old-space-size=4096"
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: "https://wwjuohjstrcyvshfuadr.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: "./dummy-credentials.json"
          NEXT_PUBLIC_WEBSOCKET_URL: "wss://lookbook-nextjs-app.azurewebsites.net/api/gemini-live"
          KLINGAI_ACCESS_KEY: ${{ secrets.KLINGAI_ACCESS_KEY }}
          KLINGAI_SECRET_KEY: ${{ secrets.KLINGAI_SECRET_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: "https://ai-itzikzabarsky2812ai950890111340.openai.azure.com/"
          AZURE_OPENAI_MODEL: "gpt-4o"
          AZURE_OPENAI_DEPLOYMENT: "lookbookAIGPT4o"
          AZURE_OPENAI_API_VERSION: "2024-04-01-preview"

      - name: Create Server.js File
        run: |
          cat > server.js << 'EOL'
          const { createServer } = require('http');
          const { parse } = require('url');
          const next = require('next');
          
          const dev = process.env.NODE_ENV !== 'production';
          const hostname = '0.0.0.0';
          const port = process.env.PORT || 3000;
          
          const app = next({ dev, hostname, port });
          const handle = app.getRequestHandler();
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true);
                await handle(req, res, parsedUrl);
              } catch (err) {
                console.error('Error occurred handling', req.url, err);
                res.statusCode = 500;
                res.end('Internal Server Error');
              }
            }).listen(port, (err) => {
              if (err) throw err;
              console.log(`> Ready on http://${hostname}:${port}`);
            });
          });
          EOL

      - name: Create Web.config File
        run: |
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="true" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="myapp">
                    <match url="/*" />
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode nodeProcessCommandLine="node.exe" />
            </system.webServer>
          </configuration>
          EOL

      - name: Create Zip Artifact
        run: |
          # Create a directory structure for the deployment
          mkdir -p deployment
          # Copy the relevant files (.next, public, node_modules, package.json, server.js, etc.)
          cp -r .next deployment/
          cp -r public deployment/ || true
          cp -r node_modules deployment/
          cp package.json package-lock.json server.js web.config .npmrc deployment/ || true
          cp .env.local azure-startup.sh deployment/ || true
          # Make the startup script executable
          chmod +x deployment/azure-startup.sh
          # Create the zip from the deployment directory
          cd deployment && zip -r ../release.zip . && cd ..

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: release.zip
          slot-name: production 