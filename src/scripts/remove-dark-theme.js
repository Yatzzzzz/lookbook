const fs = require('fs'); const path = require('path'); const glob = require('glob'); // Function to remove dark theme classes from a string const removeDarkClasses = (content) => { let modified = false; // Remove dark: tailwind prefixes const darkRemoved = content.replace(/dark:[^"'`\s]+/g, ''); if (darkRemoved !== content) { console.log('  - Removed dark: prefixes'); modified = true; content = darkRemoved; } // Replace bg-black with bg-white or bg-gray-100 const blackRemoved = content.replace(/bg-black(?!\/)/g, 'bg-white'); if (blackRemoved !== content) { console.log('  - Replaced bg-black with bg-white'); modified = true; content = blackRemoved; } // Replace bg-black with opacity const blackOpacityRemoved = content.replace(/bg-black\/\d+/g, 'bg-gray-100/80'); if (blackOpacityRemoved !== content) { console.log('  - Replaced bg-black with opacity'); modified = true; content = blackOpacityRemoved; } // Replace other dark bg colors const gray900Removed = content.replace(/bg-gray-900/g, 'bg-white'); if (gray900Removed !== content) { console.log('  - Replaced bg-gray-900 with bg-white'); modified = true; content = gray900Removed; } const gray800Removed = content.replace(/bg-gray-800/g, 'bg-gray-100'); if (gray800Removed !== content) { console.log('  - Replaced bg-gray-800 with bg-gray-100'); modified = true; content = gray800Removed; } // Remove className entries that have empty strings after removal const emptyClassNamesFixed = content .replace(/className=["'`]\s+["'`]/g, 'className=""') .replace(/className=["'`]\s*["'`]/g, 'className=""'); if (emptyClassNamesFixed !== content) { console.log('  - Fixed empty className attributes'); modified = true; content = emptyClassNamesFixed; } // Clean up consecutive spaces const spacesFixed = content.replace(/\s{2,}/g, ' '); if (spacesFixed !== content) { console.log('  - Fixed extra spaces'); modified = true; content = spacesFixed; } // Clean up empty className attributes const emptyClassRemoved = content.replace(/className=""/g, ''); if (emptyClassRemoved !== content) { console.log('  - Removed empty className'); modified = true; content = emptyClassRemoved; } return { content, modified }; }; // Function to process a file const processFile = (filePath) => { try { console.log(`Processing ${filePath}...`); const content = fs.readFileSync(filePath, 'utf8'); const { content: updatedContent, modified } = removeDarkClasses(content); if (modified) { fs.writeFileSync(filePath, updatedContent, 'utf8'); console.log(`Updated ${filePath}`); return true; } else { console.log(`No changes needed for ${filePath}`); return false; } } catch (error) { console.error(`Error processing ${filePath}:`, error); return false; } }; // Find all TypeScript and TSX files in the project const findFiles = () => { const srcPath = path.resolve(__dirname, '..'); return glob.sync(`${srcPath}/**/*.{ts,tsx,js,jsx}`, { ignore: ['**/node_modules/**', '**/.next/**'] }); }; // Main function const main = () => { const files = findFiles(); console.log(`Found ${files.length} files to process`); let modifiedCount = 0; for (const file of files) { if (processFile(file)) { modifiedCount++; } } console.log(`Done! Modified ${modifiedCount} files out of ${files.length}`); }; main(); 