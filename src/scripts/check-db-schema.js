// Script to check the database schema for the looks table const { createClient } = require('@supabase/supabase-js'); require('dotenv').config({ path: '.env.local' }); const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL; const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY; if (!supabaseUrl || !supabaseKey) { console.error('Missing Supabase credentials'); process.exit(1); } const supabase = createClient(supabaseUrl, supabaseKey); async function checkLooksTableSchema() { try { console.log('Fetching database schema info...'); // This will require the service role key since it's accessing system tables const { data: columns, error } = await supabase .from('information_schema.columns') .select('*') .eq('table_name', 'looks'); if (error) { // If we can't access the schema directly, let's try a different approach console.log('Could not access schema directly. Trying alternate approach...'); // Try to get a single look to infer schema const { data: sampleLook, error: lookError } = await supabase .from('looks') .select('*') .limit(1); if (lookError) { throw lookError; } if (sampleLook && sampleLook.length > 0) { console.log('Inferred schema from sample look:'); const schema = Object.keys(sampleLook[0]).map(key => { const value = sampleLook[0][key]; let type = typeof value; if (Array.isArray(value)) { type = 'array'; } else if (value instanceof Date) { type = 'date'; } else if (value === null) { type = 'null (unknown type)'; } return { column: key, type }; }); console.table(schema); } else { console.log('No sample looks found in the database.'); } return; } console.log('Looks table schema:'); console.table(columns.map(col => ({ column: col.column_name, type: col.data_type, nullable: col.is_nullable }))); } catch (error) { console.error('Error checking database schema:', error.message); } } // Also check if we have permissions to update the table async function testTableAccess() { try { console.log('\nTesting table access permissions...'); // Try to insert a test record const testData = { user_id: '00000000-0000-0000-0000-000000000000', // dummy ID image_url: 'https://test-image.jpg', description: 'TEST RECORD - PLEASE DELETE', upload_type: 'battle', feature_in: ['battle', 'gallery'], }; console.log('Attempting to insert test record...'); const { data, error } = await supabase .from('looks') .insert([testData]) .select(); if (error) { console.error('Error inserting test record:', error.message); if (error.code === '42501') { console.error('Permission denied. Make sure you have the right permissions.'); } } else { console.log('Successfully inserted test record:', data); // Delete the test record const testId = data[0].look_id; const { error: deleteError } = await supabase .from('looks') .delete() .eq('look_id', testId); if (deleteError) { console.error('Error deleting test record:', deleteError.message); } else { console.log('Successfully deleted test record'); } } } catch (error) { console.error('Error testing table access:', error.message); } } // Execute the functions async function main() { await checkLooksTableSchema(); await testTableAccess(); } main(); 