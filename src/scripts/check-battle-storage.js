// Script to check the "battle" bucket in Supabase storage // Run with: node -r dotenv/config src/scripts/check-battle-storage.js const { createClient } = require('@supabase/supabase-js'); // Get Supabase URL from .env or hardcode it const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://wwjuohjstrcyvshfuadr.supabase.co'; const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY; if (!supabaseKey) { console.error('ERROR: No NEXT_PUBLIC_SUPABASE_ANON_KEY found.'); console.log('Make sure your .env file contains the key or provide it as an argument.'); process.exit(1); } // Initialize Supabase client const supabase = createClient(supabaseUrl, supabaseKey); async function checkBattleBucket() { console.log('======== BATTLE BUCKET CHECK ========'); console.log(`Supabase URL: ${supabaseUrl}`); try { // Check if bucket exists const { data: buckets, error: bucketsError } = await supabase .storage .listBuckets(); if (bucketsError) { throw new Error(`Error listing buckets: ${bucketsError.message}`); } console.log('Available buckets:', buckets.map(b => b.name)); const battleBucket = buckets.find(b => b.name === 'battle'); if (!battleBucket) { throw new Error('No "battle" bucket found. Please create it in the Supabase dashboard.'); } console.log('Battle bucket exists:', battleBucket); // Check access policies console.log('\nChecking bucket access policies...'); // This is not directly possible with the JS client, would require admin access // List contents of battle bucket console.log('\nListing contents of battle bucket (root level):'); const { data: rootContents, error: rootError } = await supabase .storage .from('battle') .list('', { limit: 100, sortBy: { column: 'name', order: 'asc' } }); if (rootError) { throw new Error(`Error listing battle bucket contents: ${rootError.message}`); } if (!rootContents || rootContents.length === 0) { console.log('The battle bucket is empty. No files or folders found.'); return; } console.log(`Found ${rootContents.length} items in the battle bucket root:`); console.log(rootContents.map(item => item.name)); // Find folders (user directories) const folders = rootContents.filter(item => !item.name.includes('.')); console.log(`\nFound ${folders.length} folders in the battle bucket.`); // Check each folder for images for (const folder of folders) { console.log(`\nChecking folder: ${folder.name}`); const { data: folderContents, error: folderError } = await supabase .storage .from('battle') .list(folder.name, { limit: 100, sortBy: { column: 'name', order: 'asc' } }); if (folderError) { console.error(`Error listing contents of folder ${folder.name}: ${folderError.message}`); continue; } if (!folderContents || folderContents.length === 0) { console.log(`Folder ${folder.name} is empty.`); continue; } console.log(`Found ${folderContents.length} files in folder ${folder.name}:`); console.log(folderContents.map(item => item.name)); // Check if we have images const imageFiles = folderContents.filter(item => item.name.endsWith('.jpg') || item.name.endsWith('.jpeg') || item.name.endsWith('.png') ); console.log(`Found ${imageFiles.length} image files in folder ${folder.name}.`); // Check for battle files pattern (main, option1, option2) const mainFiles = folderContents.filter(item => item.name.includes('main')); const option1Files = folderContents.filter(item => item.name.includes('option1')); const option2Files = folderContents.filter(item => item.name.includes('option2')); console.log(`Battle pattern check: main=${mainFiles.length}, option1=${option1Files.length}, option2=${option2Files.length}`); // Check first few files for public URL access if (imageFiles.length > 0) { console.log('\nChecking public URLs for some images:'); for (const file of imageFiles.slice(0, 3)) { const { data: urlData } = supabase .storage .from('battle') .getPublicUrl(`${folder.name}/${file.name}`); const publicUrl = urlData.publicUrl; console.log(`- ${file.name}: ${publicUrl}`); // Test URL with fetch to check if accessible try { const response = await fetch(publicUrl, { method: 'HEAD' }); console.log(` Status: ${response.status} ${response.ok ? '✓' : '✗'}`); } catch (err) { console.log(` Error checking URL: ${err.message}`); } } } } console.log('\n✅ Battle bucket check completed.'); } catch (error) { console.error('❌ Error:', error.message); } } checkBattleBucket().catch(console.error); 