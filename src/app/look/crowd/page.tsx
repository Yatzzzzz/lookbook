'use client'; import React, { useState } from 'react'; import { useRouter } from 'next/navigation'; import { MessageCircle, ArrowLeft, ArrowRight } from 'lucide-react'; import CameraUpload from '../components/camera-upload'; import AudienceSelector, { AudienceType } from '../components/audience-selector'; interface Person { id: string; name: string; avatar: string; } interface CrowdOpinionData { imageData: string; question: string; audience: AudienceType; excludedPeople: Person[]; } // Common question suggestions const questionSuggestions = [ "What should I wear with this?", "Does this match my body type?", "Is this still in style?", "What accessories would go well with this?", "Which shoes would match this outfit?", "Is this appropriate for work?", "Is this color good for my skin tone?", "How can I make this more formal/casual?", ]; export default function CrowdOpinionPage() { const router = useRouter(); const [step, setStep] = useState<'upload' | 'question' | 'audience'>('upload'); const [imageData, setImageData] = useState<string | null>(null); const [question, setQuestion] = useState<string>(''); const [audience, setAudience] = useState<AudienceType>('everyone'); const [excludedPeople, setExcludedPeople] = useState<Person[]>([]); // Handle image capture from camera or file upload const handleImageCapture = (capturedImageData: string) => { setImageData(capturedImageData); setStep('question'); }; // Go to audience selection step const goToAudienceStep = () => { if (question.trim()) { setStep('audience'); } }; // Handle audience selection complete const handleAudienceComplete = (selectedAudience: AudienceType, selectedExcludedPeople: Person[]) => { setAudience(selectedAudience); setExcludedPeople(selectedExcludedPeople); // In a real application, save the crowd opinion data to a database const crowdOpinionData: CrowdOpinionData = { imageData: imageData!, question, audience: selectedAudience, excludedPeople: selectedExcludedPeople }; console.log('Crowd Opinion data saved:', crowdOpinionData); // Return to the main options page router.push('/look'); }; // Handle back button const handleBack = () => { if (step === 'question') { setStep('upload'); setImageData(null); } else if (step === 'audience') { setStep('question'); } }; // Handle suggestion click const handleSuggestionClick = (suggestion: string) => { setQuestion(suggestion); }; return ( <div className="max-w-4xl mx-auto p-4"> <h1 className="text-2xl font-bold mb-4">Crowd Opinions</h1> {/* Step 1: Upload/Camera */} {step === 'upload' && ( <div> <p className="text-gray-600 mb-4"> Take a photo and ask the community for feedback </p> <CameraUpload onImageCapture={handleImageCapture} /> </div> )} {/* Step 2: Question Input */} {step === 'question' && imageData && ( <div> <button onClick={handleBack} className="mb-4 flex items-center text-blue-500 hover:text-blue-600" > <ArrowLeft className="w-4 h-4 mr-1" /> Back </button> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {/* Image preview */} <div> <div className="relative aspect-[3/4] rounded-lg overflow-hidden bg-gray-100 "> <img src={imageData} alt="Your outfit" className="w-full h-full object-cover" /> </div> </div> {/* Question section */} <div> <h2 className="text-lg font-medium mb-2">Ask a Question</h2> <p className="text-sm text-gray-600 mb-4"> What would you like to know about this outfit? </p> {/* Question input */} <div className="mb-4"> <textarea value={question} onChange={(e) => setQuestion(e.target.value)} placeholder="Example: What accessories would go well with this?" className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 min-h-[120px]" /> </div> {/* Question suggestions */} <div className="mb-6"> <p className="text-sm font-medium mb-2">Suggestions:</p> <div className="flex flex-wrap gap-2"> {questionSuggestions.map((suggestion) => ( <button key={suggestion} onClick={() => handleSuggestionClick(suggestion)} className="px-3 py-1 bg-gray-100 rounded-full text-sm hover:bg-gray-200 " > {suggestion} </button> ))} </div> </div> {/* Preview */} {question && ( <div className="mb-6 p-4 bg-gray-100 rounded-lg"> <p className="font-medium mb-2">Preview:</p> <div className="flex items-start gap-3"> <MessageCircle className="w-5 h-5 text-blue-500 mt-1 flex-shrink-0" /> <p>{question}</p> </div> </div> )} {/* Next button */} <button onClick={goToAudienceStep} disabled={!question.trim()} className="w-full px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed" > Next <ArrowRight className="w-4 h-4 ml-1" /> </button> </div> </div> </div> )} {/* Step 3: Audience Selection */} {step === 'audience' && ( <div> <button onClick={handleBack} className="mb-4 flex items-center text-blue-500 hover:text-blue-600" > <ArrowLeft className="w-4 h-4 mr-1" /> Back </button> <AudienceSelector onComplete={handleAudienceComplete} /> </div> )} </div> ); } 