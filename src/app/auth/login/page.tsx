'use client' import { useState } from 'react' import { createClientComponentClient } from '@supabase/auth-helpers-nextjs' import { useRouter } from 'next/navigation' import Link from 'next/link' export const dynamic = 'force-dynamic'; // Modified Supabase client creation with error handling const getSupabaseClient = () => { try { return createClientComponentClient(); } catch (error) { console.error('Error creating Supabase client:', error); // Return a dummy client during static build if (typeof window === 'undefined') { return { auth: { signInWithPassword: () => ({ data: null, error: null }) } }; } throw error; // Re-throw if we're in the browser } }; export default function Login() { const [email, setEmail] = useState('') const [password, setPassword] = useState('') const [error, setError] = useState<string | null>(null) const [loading, setLoading] = useState(false) const router = useRouter() const supabase = getSupabaseClient() const handleLogin = async (e: React.FormEvent) => { e.preventDefault() setLoading(true) setError(null) try { const { error } = await supabase.auth.signInWithPassword({ email, password, }) if (error) throw error router.push('/') router.refresh() } catch (error: unknown) { if (error instanceof Error) { console.error('Error during login:', error) setError(error.message || 'Invalid login credentials') } else { console.error('Error during login:', error) setError('An unknown error occurred') } } finally { setLoading(false) } } return ( <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4"> <div className="w-full max-w-md bg-white rounded-lg shadow-md p-8"> <h2 className="text-2xl font-bold text-center text-gray-800 mb-6"> Sign in to your account </h2> {error && ( <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4"> {error} </div> )} <form onSubmit={handleLogin} className="space-y-6"> <div> <label htmlFor="email" className="block text-gray-700 text-sm font-medium mb-1"> Email </label> <input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 " /> </div> <div> <label htmlFor="password" className="block text-gray-700 text-sm font-medium mb-1"> Password </label> <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 " /> </div> <button type="submit" disabled={loading} className="w-full bg-blue-600 text-white py-2 px-4 rounded-md font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed" > {loading ? 'Signing in...' : 'Sign in'} </button> </form> <div className="mt-4 text-center"> <p className="text-sm text-gray-600 "> Don&apos;t have an account?{' '} <Link href="/auth/signup" className="text-blue-600 hover:text-blue-800 "> Sign up </Link> </p> </div> </div> </div> ) } 