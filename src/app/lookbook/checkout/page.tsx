"use client"; import React, { useState, useEffect } from 'react'; import { useRouter } from 'next/navigation'; import Image from 'next/image'; import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'; import { useAuth } from '@/contexts/AuthContext'; interface CartItem { id: string; name: string; price: number; image: string; size: string; quantity: number; } interface ShippingInfo { fullName: string; address: string; city: string; state: string; zip: string; country: string; phone: string; } interface PaymentInfo { cardNumber: string; cardHolder: string; expiryDate: string; cvv: string; } export default function CheckoutPage() { const router = useRouter(); const { user } = useAuth(); const supabase = createClientComponentClient(); const [cartItems, setCartItems] = useState<CartItem[]>([]); const [step, setStep] = useState<'cart' | 'shipping' | 'payment' | 'confirmation'>('cart'); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [processingPayment, setProcessingPayment] = useState(false); const [orderComplete, setOrderComplete] = useState(false); const [orderId, setOrderId] = useState<string | null>(null); const [shippingInfo, setShippingInfo] = useState<ShippingInfo>({ fullName: '', address: '', city: '', state: '', zip: '', country: 'United States', phone: '' }); const [paymentInfo, setPaymentInfo] = useState<PaymentInfo>({ cardNumber: '', cardHolder: '', expiryDate: '', cvv: '' }); useEffect(() => { if (!user) { router.push('/login'); return; } fetchCartItems(); }, [user, router]); const fetchCartItems = async () => { setLoading(true); setError(null); try { // In a real implementation, this would fetch from a cart table in Supabase // For now, use mock data setTimeout(() => { setCartItems([ { id: '1', name: 'Designer T-Shirt', price: 49.99, image: 'https://placehold.co/200x300/png', size: 'M', quantity: 1 }, { id: '2', name: 'Premium Jeans', price: 89.99, image: 'https://placehold.co/200x300/png', size: 'L', quantity: 1 } ]); setLoading(false); }, 1000); } catch (err) { console.error('Error fetching cart items:', err); setError('Failed to load cart. Please try again.'); setLoading(false); } }; const calculateSubtotal = () => { return cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0); }; const calculateTax = () => { return calculateSubtotal() * 0.08; // 8% tax rate }; const calculateShipping = () => { return cartItems.length > 0 ? 5.99 : 0; }; const calculateTotal = () => { return calculateSubtotal() + calculateTax() + calculateShipping(); }; const updateQuantity = (id: string, newQuantity: number) => { if (newQuantity < 1) return; setCartItems(prevItems => prevItems.map(item => item.id === id ? { ...item, quantity: newQuantity } : item ) ); }; const removeItem = (id: string) => { setCartItems(prevItems => prevItems.filter(item => item.id !== id)); }; const handleShippingInfoChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => { const { name, value } = e.target; setShippingInfo(prev => ({ ...prev, [name]: value })); }; const handlePaymentInfoChange = (e: React.ChangeEvent<HTMLInputElement>) => { const { name, value } = e.target; // Format card number with spaces if (name === 'cardNumber') { const formattedValue = value .replace(/\s/g, '') .replace(/(\d{4})/g, '$1 ') .trim() .slice(0, 19); setPaymentInfo(prev => ({ ...prev, [name]: formattedValue })); return; } // Format expiry date (MM/YY) if (name === 'expiryDate') { const formattedValue = value .replace(/\D/g, '') .replace(/(\d{2})(\d)/, '$1/$2') .slice(0, 5); setPaymentInfo(prev => ({ ...prev, [name]: formattedValue })); return; } // Limit CVV to 3 or 4 digits if (name === 'cvv') { const formattedValue = value.replace(/\D/g, '').slice(0, 4); setPaymentInfo(prev => ({ ...prev, [name]: formattedValue })); return; } setPaymentInfo(prev => ({ ...prev, [name]: value })); }; const handleContinueToShipping = () => { if (cartItems.length === 0) { setError('Your cart is empty. Add items before proceeding.'); return; } setStep('shipping'); }; const handleContinueToPayment = (e: React.FormEvent) => { e.preventDefault(); setStep('payment'); }; const handlePlaceOrder = async (e: React.FormEvent) => { e.preventDefault(); setProcessingPayment(true); setError(null); try { // In a real implementation, this would process payment and create an order in Supabase await new Promise(resolve => setTimeout(resolve, 2000)); // Generate mock order ID const mockOrderId = `ORD-${Math.floor(Math.random() * 100000)}`; setOrderId(mockOrderId); setOrderComplete(true); setStep('confirmation'); // Clear cart setCartItems([]); } catch (err) { console.error('Error processing payment:', err); setError('Failed to process payment. Please try again.'); } finally { setProcessingPayment(false); } }; const handleBackToShopping = () => { router.push('/gallery'); }; if (!user) { return <div className="p-4 text-center">Redirecting to login...</div>; } if (loading) { return ( <div className="flex justify-center items-center h-screen"> <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div> </div> ); } return ( <div className="container mx-auto p-4 max-w-4xl"> <h1 className="text-2xl font-bold mb-6">Checkout</h1> {/* Progress Indicator */} <div className="flex items-center justify-between mb-8 max-w-md mx-auto"> <div className={`flex flex-col items-center ${step === 'cart' ? 'text-blue-600' : 'text-gray-500'}`}> <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'cart' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>1</div> <span className="text-xs mt-1">Cart</span> </div> <div className="flex-1 h-1 bg-gray-200 mx-2"> <div className={`h-1 bg-blue-600 ${step !== 'cart' ? 'w-full' : 'w-0'} transition-all duration-300`}></div> </div> <div className={`flex flex-col items-center ${step === 'shipping' ? 'text-blue-600' : 'text-gray-500'}`}> <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'shipping' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>2</div> <span className="text-xs mt-1">Shipping</span> </div> <div className="flex-1 h-1 bg-gray-200 mx-2"> <div className={`h-1 bg-blue-600 ${step === 'payment' || step === 'confirmation' ? 'w-full' : 'w-0'} transition-all duration-300`}></div> </div> <div className={`flex flex-col items-center ${step === 'payment' ? 'text-blue-600' : 'text-gray-500'}`}> <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'payment' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>3</div> <span className="text-xs mt-1">Payment</span> </div> <div className="flex-1 h-1 bg-gray-200 mx-2"> <div className={`h-1 bg-blue-600 ${step === 'confirmation' ? 'w-full' : 'w-0'} transition-all duration-300`}></div> </div> <div className={`flex flex-col items-center ${step === 'confirmation' ? 'text-blue-600' : 'text-gray-500'}`}> <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step === 'confirmation' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>4</div> <span className="text-xs mt-1">Done</span> </div> </div> {error && ( <div className="bg-red-100 p-3 rounded-md text-red-700 text-sm mb-4"> {error} </div> )} <div className="flex flex-col md:flex-row gap-6"> <div className="flex-1"> {/* Cart Step */} {step === 'cart' && ( <div className="bg-white rounded-lg shadow-sm p-4"> <h2 className="text-lg font-medium mb-4">Your Cart</h2> {cartItems.length === 0 ? ( <div className="text-center py-8"> <p className="text-gray-500 mb-4">Your cart is empty</p> <button onClick={handleBackToShopping} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" > Browse Items </button> </div> ) : ( <div className="space-y-4"> {cartItems.map((item) => ( <div key={item.id} className="flex border-b pb-4"> <div className="relative w-20 h-20 shrink-0"> <Image src={item.image} alt={item.name} fill style={{ objectFit: 'cover' }} className="rounded-md" /> </div> <div className="ml-4 flex-1"> <div className="flex justify-between"> <h3 className="font-medium">{item.name}</h3> <span className="font-medium">${item.price.toFixed(2)}</span> </div> <p className="text-sm text-gray-500">Size: {item.size}</p> <div className="flex justify-between items-center mt-2"> <div className="flex items-center"> <button onClick={() => updateQuantity(item.id, item.quantity - 1)} className="w-8 h-8 bg-gray-100 rounded-md flex items-center justify-center" > - </button> <span className="mx-2">{item.quantity}</span> <button onClick={() => updateQuantity(item.id, item.quantity + 1)} className="w-8 h-8 bg-gray-100 rounded-md flex items-center justify-center" > + </button> </div> <button onClick={() => removeItem(item.id)} className="text-red-500 text-sm" > Remove </button> </div> </div> </div> ))} </div> )} </div> )} {/* Shipping Step */} {step === 'shipping' && ( <div className="bg-white rounded-lg shadow-sm p-4"> <h2 className="text-lg font-medium mb-4">Shipping Information</h2> <form onSubmit={handleContinueToPayment} className="space-y-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Full Name </label> <input type="text" name="fullName" value={shippingInfo.fullName} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Address </label> <input type="text" name="address" value={shippingInfo.address} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> City </label> <input type="text" name="city" value={shippingInfo.city} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> State </label> <input type="text" name="state" value={shippingInfo.state} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Zip Code </label> <input type="text" name="zip" value={shippingInfo.zip} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Country </label> <select name="country" value={shippingInfo.country} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required > <option value="United States">United States</option> <option value="Canada">Canada</option> <option value="United Kingdom">United Kingdom</option> <option value="Australia">Australia</option> <option value="Germany">Germany</option> <option value="France">France</option> </select> </div> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Phone Number </label> <input type="tel" name="phone" value={shippingInfo.phone} onChange={handleShippingInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div className="flex justify-between mt-6"> <button type="button" onClick={() => setStep('cart')} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300" > Back to Cart </button> <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" > Continue to Payment </button> </div> </form> </div> )} {/* Payment Step */} {step === 'payment' && ( <div className="bg-white rounded-lg shadow-sm p-4"> <h2 className="text-lg font-medium mb-4">Payment Information</h2> <form onSubmit={handlePlaceOrder} className="space-y-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Card Number </label> <input type="text" name="cardNumber" value={paymentInfo.cardNumber} onChange={handlePaymentInfoChange} placeholder="1234 5678 9012 3456" className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Card Holder Name </label> <input type="text" name="cardHolder" value={paymentInfo.cardHolder} onChange={handlePaymentInfoChange} className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> Expiry Date </label> <input type="text" name="expiryDate" value={paymentInfo.expiryDate} onChange={handlePaymentInfoChange} placeholder="MM/YY" className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1"> CVV </label> <input type="text" name="cvv" value={paymentInfo.cvv} onChange={handlePaymentInfoChange} placeholder="123" className="w-full p-2 border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500" required /> </div> </div> <div className="flex justify-between mt-6"> <button type="button" onClick={() => setStep('shipping')} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300" disabled={processingPayment} > Back to Shipping </button> <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50" disabled={processingPayment} > {processingPayment ? 'Processing...' : 'Place Order'} </button> </div> </form> </div> )} {/* Confirmation Step */} {step === 'confirmation' && ( <div className="bg-white rounded-lg shadow-sm p-6 text-center"> <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4"> <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" /> </svg> </div> <h2 className="text-2xl font-bold mb-2">Order Confirmed!</h2> <p className="text-gray-600 mb-4">Thank you for your purchase</p> <div className="bg-gray-50 p-4 rounded-md text-left mb-6"> <p className="text-sm text-gray-600 mb-1">Order ID: <span className="font-medium">{orderId}</span></p> <p className="text-sm text-gray-600">A confirmation email has been sent to your email address.</p> </div> <div className="flex justify-center"> <button onClick={handleBackToShopping} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" > Continue Shopping </button> </div> </div> )} </div> {/* Order Summary */} {step !== 'confirmation' && ( <div className="w-full md:w-80 shrink-0"> <div className="bg-white rounded-lg shadow-sm p-4 sticky top-4"> <h2 className="text-lg font-medium mb-4">Order Summary</h2> <div className="space-y-2 mb-4"> <div className="flex justify-between"> <span className="text-gray-600">Subtotal</span> <span>${calculateSubtotal().toFixed(2)}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Tax</span> <span>${calculateTax().toFixed(2)}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Shipping</span> <span>${calculateShipping().toFixed(2)}</span> </div> <div className="border-t pt-2 mt-2"> <div className="flex justify-between font-medium"> <span>Total</span> <span>${calculateTotal().toFixed(2)}</span> </div> </div> </div> {step === 'cart' && ( <button onClick={handleContinueToShipping} className="w-full py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50" disabled={cartItems.length === 0} > Continue to Shipping </button> )} </div> </div> )} </div> </div> ); } 