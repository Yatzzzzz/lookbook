'use client'; import { useState } from 'react'; import * as Tabs from '@radix-ui/react-tabs'; import { useQuery, QueryClient, QueryClientProvider } from '@tanstack/react-query'; import Masonry from 'react-masonry-css'; import { Search, Heart, BookmarkPlus, Share2 } from 'lucide-react'; // Create a client const queryClient = new QueryClient(); // Types interface Look { look_id: string; user_id: string; image_url: string; caption: string; created_at: string; likes_count: number; comments_count: number; views_count: number; username: string; avatar_url?: string; is_saved?: boolean; tags?: string[]; } interface WardrobeItem { item_id: string; name: string; category: string; color: string; image_url: string; brand: string; } interface ApiResponse { looks?: Look[]; items?: WardrobeItem[]; pagination: { has_more: boolean; total: number; page: number; limit: number; }; } // Demo API functions const fetchLooks = async (tab: string, filter: string, page: number = 1): Promise<ApiResponse> => { // Simulate API delay await new Promise(resolve => setTimeout(resolve, 800)); // Generate random mock data const generateMockLooks = (count: number): Look[] => { return Array.from({ length: count }, (_, i) => ({ look_id: `look-${Math.random().toString(36).substring(2, 9)}`, user_id: `user-${Math.random().toString(36).substring(2, 9)}`, image_url: `https://picsum.photos/500/${600 + Math.floor(Math.random() * 400)}?random=${Math.floor(Math.random() * 1000)}`, caption: `Look caption ${i + 1} with style ${filter}`, created_at: new Date(Date.now() - Math.floor(Math.random() * 10000000000)).toISOString(), likes_count: Math.floor(Math.random() * 1000), comments_count: Math.floor(Math.random() * 100), views_count: Math.floor(Math.random() * 5000), username: `user${i + 1}`, avatar_url: `https://i.pravatar.cc/150?u=${i + 1}`, is_saved: Math.random() > 0.5, tags: ['casual', 'spring', 'summer', 'outfit', 'style'].sort(() => 0.5 - Math.random()).slice(0, 3) })); }; // Generate random mock wardrobe items const generateMockWardrobeItems = (count: number): WardrobeItem[] => { const categories = ['Tops', 'Bottoms', 'Dresses', 'Outerwear', 'Shoes', 'Accessories']; const colors = ['Black', 'White', 'Blue', 'Red', 'Green', 'Yellow', 'Pink', 'Purple', 'Brown', 'Gray']; const brands = ['Nike', 'Adidas', 'Zara', 'H&M', 'Gucci', 'Balenciaga', 'Calvin Klein']; return Array.from({ length: count }, () => ({ item_id: `item-${Math.random().toString(36).substring(2, 9)}`, name: `${colors[Math.floor(Math.random() * colors.length)]} ${categories[Math.floor(Math.random() * categories.length)]}`, category: categories[Math.floor(Math.random() * categories.length)], color: colors[Math.floor(Math.random() * colors.length)], image_url: `https://picsum.photos/seed/${Math.random().toString(36).substring(2, 9)}/400/600`, brand: brands[Math.floor(Math.random() * brands.length)] })); }; if (tab === 'wardrobe') { return { items: generateMockWardrobeItems(20), pagination: { has_more: page < 2, total: 20, page, limit: 20 } }; } else { // Filter results based on the filter parameter let looks = generateMockLooks(20); if (filter !== 'all') { // Simulate filtering by just changing caption looks = looks.map(look => ({ ...look, caption: `${filter.charAt(0).toUpperCase() + filter.slice(1)} look - ${look.caption}` })); } return { looks, pagination: { has_more: page < 3, total: 60, page, limit: 20 } }; } }; // Wrap the main component with a provider function LookbookContent() { const [activeTab, setActiveTab] = useState('saved'); const [activeFilter, setActiveFilter] = useState('all'); const [searchTerm, setSearchTerm] = useState(''); const [page, setPage] = useState(1); // Query for fetching looks const { data, isLoading, isError } = useQuery({ queryKey: ['looks', activeTab, activeFilter, page], queryFn: () => fetchLooks(activeTab, activeFilter, page) }); // Responsive breakpoints for masonry layout const masonryBreakpoints = { default: 3, 1100: 3, 700: 2, 500: 1 }; // Filter options based on active tab const getFilterOptions = () => { if (activeTab === 'saved') { return [ { id: 'all', label: 'All Saved' }, { id: 'recent', label: 'Recent' }, { id: 'favorite', label: 'Favorites' } ]; } if (activeTab === 'wardrobe') { return [ { id: 'all', label: 'All Items' }, { id: 'tops', label: 'Tops' }, { id: 'bottoms', label: 'Bottoms' }, { id: 'shoes', label: 'Shoes' }, { id: 'accessories', label: 'Accessories' } ]; } return [ { id: 'all', label: 'All Looks' }, { id: 'casual', label: 'Casual' }, { id: 'formal', label: 'Formal' }, { id: 'sport', label: 'Sport' }, { id: 'party', label: 'Party' } ]; }; // Handle load more const handleLoadMore = () => { if (data?.pagination.has_more) { setPage(prev => prev + 1); } }; return ( <div className="max-w-6xl mx-auto px-4 pb-16"> <h1 className="text-2xl font-bold my-4">Lookbook</h1> {/* Main tab navigation */} <Tabs.Root value={activeTab} onValueChange={setActiveTab} className="w-full" > <Tabs.List className="flex w-full border-b border-gray-200 mb-4 overflow-x-auto"> <Tabs.Trigger value="saved" className="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 whitespace-nowrap" > Saved Looks </Tabs.Trigger> <Tabs.Trigger value="my-lookbook" className="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 whitespace-nowrap" > My Lookbook </Tabs.Trigger> <Tabs.Trigger value="virtual" className="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 whitespace-nowrap" > Virtual Looks </Tabs.Trigger> <Tabs.Trigger value="wardrobe" className="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 data-[state=active]:border-blue-500 data-[state=active]:text-blue-600 whitespace-nowrap" > My Wardrobe </Tabs.Trigger> </Tabs.List> {/* Filter and search bar */} <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4"> <div className="flex overflow-x-auto w-full sm:w-auto"> {getFilterOptions().map(filter => ( <button key={filter.id} className={`px-3 py-1.5 text-xs font-medium rounded-full mr-2 whitespace-nowrap ${activeFilter === filter.id ? 'bg-blue-100 text-blue-800 ' : 'bg-gray-100 text-gray-800 hover:bg-gray-200 ' }`} onClick={() => setActiveFilter(filter.id)} > {filter.label} </button> ))} </div> <div className="relative w-full sm:w-64"> <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none"> <Search className="w-4 h-4 text-gray-500 " /> </div> <input type="text" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5 " placeholder="Search..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} /> </div> </div> {/* Tab content */} <Tabs.Content value="saved" className="outline-none"> {renderLookbookContent(data?.looks, isLoading, isError, activeTab === 'saved')} </Tabs.Content> <Tabs.Content value="my-lookbook" className="outline-none"> {renderLookbookContent(data?.looks, isLoading, isError, activeTab === 'my-lookbook')} </Tabs.Content> <Tabs.Content value="virtual" className="outline-none"> <div className="text-center py-12 bg-gray-50 rounded-lg"> <h3 className="text-xl font-semibold mb-2">No Virtual Looks Yet</h3> <p className="text-gray-500 mb-4">Create virtual looks with our AI assistant!</p> <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"> Try AI Lookbook Creator </button> </div> </Tabs.Content> <Tabs.Content value="wardrobe" className="outline-none"> {renderWardrobeContent(data?.items, isLoading, isError)} </Tabs.Content> </Tabs.Root> {/* Load more button */} {data?.pagination.has_more && ( <div className="text-center mt-8"> <button onClick={handleLoadMore} className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50" disabled={isLoading} > {isLoading ? 'Loading...' : 'Load More'} </button> </div> )} </div> ); // Helper function to render the lookbook content function renderLookbookContent(looks: Look[] | undefined, isLoading: boolean, isError: boolean, isEmpty: boolean = false) { if (isLoading) { return ( <div className="text-center py-12"> <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" /> <p className="mt-2 text-gray-500">Loading looks...</p> </div> ); } if (isError) { return ( <div className="text-center py-12 bg-red-50 rounded-lg"> <p className="text-red-600 ">Failed to load looks. Please try again.</p> </div> ); } if (!looks || looks.length === 0 || isEmpty) { return ( <div className="text-center py-12 bg-gray-50 rounded-lg"> <h3 className="text-xl font-semibold mb-2">No Looks Found</h3> <p className="text-gray-500 mb-4"> {activeTab === 'saved' ? "You haven't saved any looks yet." : activeTab === 'my-lookbook' ? "You haven't created any looks yet." : "No looks found matching your criteria."} </p> <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"> {activeTab === 'saved' ? "Explore Gallery" : activeTab === 'my-lookbook' ? "Create New Look" : "Clear Filters"} </button> </div> ); } return ( <Masonry breakpointCols={masonryBreakpoints} className="flex w-auto -ml-4" columnClassName="pl-4 bg-clip-padding" > {looks.map((look) => ( <div key={look.look_id} className="mb-4"> <div className="bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200 "> <div className="relative"> <img src={look.image_url} alt={look.caption} className="w-full object-cover" style={{ minHeight: '200px' }} /> <div className="absolute top-2 right-2 flex space-x-1"> <button className="p-1.5 bg-gray-100/80 rounded-full text-white hover:bg-gray-100/80"> <BookmarkPlus size={16} /> </button> </div> </div> <div className="p-3"> <div className="flex items-center mb-2"> <img src={look.avatar_url || "https://i.pravatar.cc/150"} alt={look.username} className="w-6 h-6 rounded-full mr-2 object-cover" /> <span className="text-sm font-medium">{look.username}</span> </div> <p className="text-sm text-gray-600 mb-2">{look.caption}</p> {look.tags && look.tags.length > 0 && ( <div className="flex flex-wrap gap-1 mt-2"> {look.tags.map((tag, index) => ( <span key={index} className="px-2 py-0.5 bg-gray-100 text-xs rounded-full" > #{tag} </span> ))} </div> )} <div className="flex items-center justify-between mt-3 text-gray-500"> <div className="flex items-center space-x-3"> <button className="flex items-center space-x-1 hover:text-gray-700"> <Heart size={14} /> <span className="text-xs">{look.likes_count}</span> </button> <button className="flex items-center space-x-1 hover:text-gray-700"> <Share2 size={14} /> </button> </div> <span className="text-xs">{new Date(look.created_at).toLocaleDateString()}</span> </div> </div> </div> </div> ))} </Masonry> ); } // Helper function to render the wardrobe content function renderWardrobeContent(items: WardrobeItem[] | undefined, isLoading: boolean, isError: boolean) { if (isLoading) { return ( <div className="text-center py-12"> <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" /> <p className="mt-2 text-gray-500">Loading wardrobe items...</p> </div> ); } if (isError) { return ( <div className="text-center py-12 bg-red-50 rounded-lg"> <p className="text-red-600 ">Failed to load wardrobe items. Please try again.</p> </div> ); } if (!items || items.length === 0) { return ( <div className="text-center py-12 bg-gray-50 rounded-lg"> <h3 className="text-xl font-semibold mb-2">Your Wardrobe is Empty</h3> <p className="text-gray-500 mb-4">Add items to your virtual wardrobe to get started.</p> <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"> Add First Item </button> </div> ); } // Group items by category const itemsByCategory: Record<string, WardrobeItem[]> = {}; items.forEach(item => { if (!itemsByCategory[item.category]) { itemsByCategory[item.category] = []; } itemsByCategory[item.category].push(item); }); return ( <div className="space-y-8"> {Object.entries(itemsByCategory).map(([category, categoryItems]) => ( <div key={category}> <h3 className="text-lg font-medium mb-4">{category}</h3> <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4"> {categoryItems.map(item => ( <div key={item.item_id} className="bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200 "> <div className="relative pt-[100%]"> <img src={item.image_url} alt={item.name} className="absolute top-0 left-0 w-full h-full object-cover" /> </div> <div className="p-2"> <h4 className="font-medium text-sm truncate">{item.name}</h4> <div className="flex justify-between items-center mt-1"> <span className="text-xs text-gray-500">{item.brand}</span> <span className="text-xs px-1.5 py-0.5 bg-gray-100 rounded-full"> {item.color} </span> </div> </div> </div> ))} </div> </div> ))} </div> ); } } // Main export with the QueryClientProvider export default function LookbookPage() { return ( <QueryClientProvider client={queryClient}> <LookbookContent /> </QueryClientProvider> ); } 