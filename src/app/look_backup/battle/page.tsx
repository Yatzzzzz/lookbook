"use client"; import React, { useState, useEffect } from 'react'; import { useRouter } from 'next/navigation'; import Image from 'next/image'; interface Look { id: string; imageUrl: string; description: string; userName: string; userAvatar: string; votes: number; } export default function LookBattlePage() { const [looks, setLooks] = useState<Look[]>([]); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [voted, setVoted] = useState<string | null>(null); const router = useRouter(); useEffect(() => { const fetchBattleLooks = async () => { try { // In a real implementation, this would fetch random looks from Supabase const response = await fetch('/api/looks/battle'); if (!response.ok) { throw new Error('Failed to fetch looks for battle'); } const data = await response.json(); setLooks(data.looks); } catch (err) { console.error('Error fetching battle looks:', err); setError('Failed to load looks. Please try again.'); // Fallback to mock data for now setLooks([ { id: '1', imageUrl: 'https://placehold.co/400x600/png', description: 'Summer casual outfit', userName: 'StyleQueen', userAvatar: 'https://placehold.co/50/png', votes: 124 }, { id: '2', imageUrl: 'https://placehold.co/400x600/png', description: 'Evening wear collection', userName: 'FashionKing', userAvatar: 'https://placehold.co/50/png', votes: 98 } ]); } finally { setLoading(false); } }; fetchBattleLooks(); }, []); const handleVote = async (lookId: string) => { if (voted) return; setVoted(lookId); try { // In a real implementation, this would send the vote to the API await fetch('/api/looks/vote', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ lookId }), }); // Update the UI optimistically setLooks( looks.map(look => look.id === lookId ? { ...look, votes: look.votes + 1 } : look ) ); // Navigate to results after a short delay setTimeout(() => { router.push('/look/battle/results'); }, 1500); } catch (err) { console.error('Error voting:', err); setError('Failed to register your vote. Please try again.'); setVoted(null); } }; if (loading) { return ( <div className="flex justify-center items-center h-screen"> <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div> </div> ); } if (error) { return ( <div className="container mx-auto p-4"> <div className="bg-red-100 p-4 rounded-md text-red-700 mb-4"> {error} </div> <button onClick={() => router.push('/gallery')} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" > Back to Gallery </button> </div> ); } return ( <div className="container mx-auto p-4"> <h1 className="text-3xl font-bold mb-6 text-center">Look Battle</h1> <p className="text-center mb-8">Vote for your favorite look!</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> {looks.map((look) => ( <div key={look.id} className={`relative overflow-hidden rounded-lg shadow-md transition-all ${voted && voted !== look.id ? 'opacity-50' : ''} ${voted === look.id ? 'ring-4 ring-blue-500' : ''}`} > <div className="relative aspect-[3/4] w-full"> <Image src={look.imageUrl} alt={look.description} fill style={{ objectFit: 'cover' }} className="rounded-t-lg" /> </div> <div className="p-4 bg-white"> <div className="flex items-center mb-2"> <div className="relative h-8 w-8 mr-2 rounded-full overflow-hidden"> <Image src={look.userAvatar} alt={look.userName} fill style={{ objectFit: 'cover' }} /> </div> <p className="font-medium">{look.userName}</p> </div> <p className="text-gray-700 mb-4">{look.description}</p> <button onClick={() => handleVote(look.id)} disabled={Boolean(voted)} className={`w-full py-2 rounded-md text-white font-medium transition-colors ${voted ? 'bg-gray-400' : 'bg-blue-500 hover:bg-blue-600'}`} > {voted === look.id ? 'Voted!' : 'Vote for this look'} </button> <p className="text-center mt-2 text-sm text-gray-500"> {look.votes} votes </p> </div> </div> ))} </div> <div className="mt-8 flex justify-center"> <button onClick={() => router.push('/gallery')} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors" > Back to Gallery </button> </div> </div> ); } 