'use client'; import { useState, useEffect } from 'react'; import { useParams, useRouter } from 'next/navigation'; import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'; import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"; import { Button } from "@/components/ui/button"; import { Loader2, Heart, MessageSquare, Share2, ArrowLeft, MessageCircle, Send } from "lucide-react"; import { useToast } from "@/hooks/use-toast"; import BottomNav from "@/components/BottomNav"; import Link from 'next/link'; import { Separator } from '@/components/ui/separator'; import { Textarea } from '@/components/ui/textarea'; import Image from "next/image"; interface BattleLookDetail { id: string; user_id: string; image_url: string; description: string; created_at: string; likes_count: number; isLiked: boolean; user: { username: string; avatar_url: string | null; }; } interface Comment { id: string; user_id: string; look_id: string; content: string; created_at: string; user: { username: string; avatar_url: string | null; }; } export default function BattleDetailPage() { const params = useParams(); const router = useRouter(); const { toast } = useToast(); const supabase = createClientComponentClient(); const [look, setLook] = useState<BattleLookDetail | null>(null); const [isLoading, setIsLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [comments, setComments] = useState<Comment[]>([]); const [newComment, setNewComment] = useState(''); const [isSubmittingComment, setIsSubmittingComment] = useState(false); const [currentUser, setCurrentUser] = useState<any>(null); // Fetch battle look details and user info useEffect(() => { async function fetchData() { if (!params.id) return; setIsLoading(true); console.log('Fetching battle look detail for ID:', params.id); try { // Get current user const { data: { user } } = await supabase.auth.getUser(); setCurrentUser(user); console.log('Current user:', user ? `ID: ${user.id}` : 'Not logged in'); // Fetch the battle look details console.log('Querying Supabase for look_id:', params.id); const { data: lookData, error: lookError } = await supabase .from('looks') .select(` look_id, user_id, image_url, description, created_at, profiles ( username, avatar_url ) `) .eq('look_id', params.id) .single(); if (lookError) { console.error('Error fetching look data:', lookError); throw lookError; } if (!lookData) { console.error('No look found with ID:', params.id); setError('Battle look not found'); setIsLoading(false); return; } console.log('Look data retrieved successfully:', lookData); // Get likes count console.log('Fetching likes count for look_id:', params.id); const { count: likesCount, error: likesError } = await supabase .from('likes') .select('*', { count: 'exact', head: true }) .eq('look_id', params.id); if (likesError) { console.error('Error fetching likes count:', likesError); throw likesError; } console.log('Likes count:', likesCount || 0); // Check if current user has liked this look let isLiked = false; if (user) { console.log('Checking if user has liked this look'); const { data: likeData } = await supabase .from('likes') .select('id') .eq('look_id', params.id) .eq('user_id', user.id) .single(); isLiked = !!likeData; console.log('User has liked this look:', isLiked); } // Format the battle look data const formattedLook: BattleLookDetail = { id: lookData.look_id, user_id: lookData.user_id, image_url: lookData.image_url, description: lookData.description || '', created_at: lookData.created_at, likes_count: likesCount || 0, isLiked, user: { username: lookData.profiles?.[0]?.username || 'unknown', avatar_url: lookData.profiles?.[0]?.avatar_url || null } }; console.log('Formatted look data:', formattedLook); setLook(formattedLook); // Fetch comments for this look await fetchComments(params.id as string); } catch (err: any) { console.error('Error fetching battle look:', err); setError(err.message || 'Failed to load battle look details'); } finally { setIsLoading(false); } } fetchData(); }, [params.id, supabase]); async function fetchComments(lookId: string) { try { const { data: commentsData, error: commentsError } = await supabase .from('comments') .select(` id, content, created_at, user_id, profiles ( username, avatar_url ) `) .eq('look_id', lookId) .order('created_at', { ascending: false }); if (commentsError) throw commentsError; const formattedComments: Comment[] = commentsData?.map(comment => ({ id: comment.id, user_id: comment.user_id, look_id: lookId, content: comment.content, created_at: comment.created_at, user: { username: comment.profiles?.[0]?.username || 'unknown', avatar_url: comment.profiles?.[0]?.avatar_url || null } })) || []; setComments(formattedComments); } catch (err) { console.error('Error fetching comments:', err); // Don't set error state here to avoid blocking the whole page rendering } } const handleLike = async () => { if (!currentUser) { toast({ title: "Authentication required", description: "Please sign in to like this look", variant: "destructive" }); return; } try { if (look?.isLiked) { // Unlike the look await supabase .from('likes') .delete() .eq('look_id', params.id) .eq('user_id', currentUser.id); setLook(prev => prev ? { ...prev, likes_count: prev.likes_count - 1, isLiked: false } : null); toast({ title: "Like removed", description: "You've removed your like from this look" }); } else { // Like the look await supabase .from('likes') .insert({ look_id: params.id, user_id: currentUser.id }); setLook(prev => prev ? { ...prev, likes_count: prev.likes_count + 1, isLiked: true } : null); toast({ title: "Look liked!", description: "You've liked this battle look" }); } } catch (err) { console.error('Error liking/unliking look:', err); toast({ title: "Action failed", description: "There was an error processing your request", variant: "destructive" }); } }; const handleSubmitComment = async () => { if (!currentUser) { toast({ title: "Authentication required", description: "Please sign in to comment", variant: "destructive" }); return; } if (!newComment.trim()) { toast({ title: "Empty comment", description: "Please write something before submitting", variant: "destructive" }); return; } setIsSubmittingComment(true); try { const { data: commentData, error: commentError } = await supabase .from('comments') .insert({ look_id: params.id, user_id: currentUser.id, content: newComment.trim() }) .select() .single(); if (commentError) throw commentError; // Refetch comments to get the latest await fetchComments(params.id as string); setNewComment(''); toast({ title: "Comment added", description: "Your comment has been posted successfully" }); } catch (err) { console.error('Error posting comment:', err); toast({ title: "Comment failed", description: "There was an error posting your comment", variant: "destructive" }); } finally { setIsSubmittingComment(false); } }; const formatDate = (dateString: string) => { const date = new Date(dateString); return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }); }; if (isLoading) { return ( <div className="min-h-screen bg-background pb-16"> <div className="flex justify-center items-center min-h-[300px] md:min-h-[400px]"> <Loader2 className="h-8 w-8 animate-spin text-primary" /> </div> <BottomNav /> </div> ); } if (error || !look) { return ( <div className="min-h-screen bg-background pb-16"> <div className="container px-4 py-6 md:py-8"> <Button variant="ghost" className="mb-4" onClick={() => router.back()} > <ArrowLeft className="h-4 w-4 mr-2" /> Back </Button> <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md"> <p className="font-medium">Error</p> <p>{error || 'Battle look not found'}</p> </div> </div> <BottomNav /> </div> ); } return ( <div className="min-h-screen bg-background pb-16"> <main className="container px-4 py-6 md:py-8"> <Button variant="ghost" className="mb-4" onClick={() => router.back()} > <ArrowLeft className="h-4 w-4 mr-2" /> Back to Battle Gallery </Button> <div className="max-w-3xl mx-auto"> {/* User info */} <div className="flex items-center gap-3 mb-4"> <Avatar> <AvatarImage src={look.user.avatar_url || ''} /> <AvatarFallback>{look.user.username.substring(0, 2).toUpperCase()}</AvatarFallback> </Avatar> <div> <p className="font-medium">{look.user.username}</p> <p className="text-sm text-muted-foreground">{formatDate(look.created_at)}</p> </div> </div> {/* Image */} <div className="border rounded-lg overflow-hidden mb-4 relative aspect-square"> <Image src={look.image_url} alt={`Battle look by ${look.user.username}`} fill priority className="object-cover" /> </div> {/* Description */} {look.description && ( <div className="mb-4"> <p className="text-sm">{look.description}</p> </div> )} {/* Actions */} <div className="flex gap-4 mb-6"> <Button variant={look.isLiked ? "default" : "outline"} onClick={handleLike} > <Heart className={`h-4 w-4 mr-2 ${look.isLiked ? 'fill-current' : ''}`} /> {look.likes_count > 0 ? look.likes_count : ''} Like {look.likes_count !== 1 ? 's' : ''} </Button> <Button variant="outline"> <MessageCircle className="h-4 w-4 mr-2" /> {comments.length > 0 ? comments.length : ''} Comment {comments.length !== 1 ? 's' : ''} </Button> <Button variant="outline"> <Share2 className="h-4 w-4 mr-2" /> Share </Button> </div> <Separator className="my-6" /> {/* Comments section */} <div> <h2 className="text-xl font-semibold mb-4">Comments</h2> {/* New comment input */} {currentUser ? ( <div className="mb-6"> <Textarea placeholder="Add a comment..." value={newComment} onChange={(e) => setNewComment(e.target.value)} rows={3} className="resize-none mb-2" /> <Button onClick={handleSubmitComment} disabled={isSubmittingComment || !newComment.trim()} > {isSubmittingComment ? ( <> <Loader2 className="h-4 w-4 mr-2 animate-spin" /> Posting... </> ) : ( 'Post Comment' )} </Button> </div> ) : ( <div className="mb-6 p-4 bg-muted rounded-lg text-center"> <p className="mb-2">Sign in to leave a comment</p> <Link href="/login" className="text-primary hover:underline"> Go to Login </Link> </div> )} {/* Comments list */} {comments.length > 0 ? ( <div className="space-y-4"> {comments.map((comment) => ( <div key={comment.id} className="p-4 border rounded-lg"> <div className="flex items-center gap-2 mb-2"> <Avatar className="h-6 w-6"> <AvatarImage src={comment.user.avatar_url || ''} /> <AvatarFallback>{comment.user.username.substring(0, 2).toUpperCase()}</AvatarFallback> </Avatar> <span className="font-medium text-sm">{comment.user.username}</span> <span className="text-xs text-muted-foreground">• {formatDate(comment.created_at)}</span> </div> <p className="text-sm">{comment.content}</p> </div> ))} </div> ) : ( <div className="text-center py-8 text-muted-foreground"> <p>No comments yet. Be the first to comment!</p> </div> )} </div> </div> </main> <BottomNav /> </div> ); } 