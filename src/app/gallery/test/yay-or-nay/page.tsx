'use client'; import React, { useState, useEffect } from 'react'; import NavBar from '@/components/NavBar'; import BottomNav from '@/components/BottomNav'; import YayOrNayGrid from '@/components/gallery/YayOrNayGrid/YayOrNayGrid'; import { getLooks } from '@/lib/gallery-api'; import { Loader2, ThumbsUp, ThumbsDown, Activity } from 'lucide-react'; import styles from './styles.module.css'; export default function YayOrNayPage() { const [items, setItems] = useState<any[]>([]); const [loading, setLoading] = useState(true); const [stats, setStats] = useState({ yayCount: 0, nayCount: 0, totalVotes: 0 }); const [userVotes, setUserVotes] = useState<Record<string, 'yay' | 'nay'>>({}); useEffect(() => { fetchLooks(); }, []); const fetchLooks = async () => { setLoading(true); try { const response = await getLooks({ tab: 'yay_or_nay', limit: 20 }); setItems(response.items || []); // Mock stats for demonstration setStats({ yayCount: Math.floor(Math.random() * 500) + 200, nayCount: Math.floor(Math.random() * 300) + 100, totalVotes: Math.floor(Math.random() * 1000) + 500 }); } catch (error) { console.error('Error fetching looks:', error); } finally { setLoading(false); } }; const handleVote = (lookId: string, vote: 'yay' | 'nay') => { setUserVotes(prev => ({ ...prev, [lookId]: vote })); // Update stats setStats(prev => { const newStats = { ...prev }; if (vote === 'yay') { newStats.yayCount++; } else { newStats.nayCount++; } newStats.totalVotes++; return newStats; }); // Here you would call an API to record the vote console.log(`Voted ${vote} for look ${lookId}`); }; const yayPercentage = stats.totalVotes > 0 ? Math.round((stats.yayCount / stats.totalVotes) * 100) : 0; return ( <div className="min-h-screen pb-16"> <NavBar /> <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-10"> <div className="container flex items-center h-14"> <div className="text-lg md:text-xl font-semibold">Yay or Nay</div> </div> </div> <div className={styles.pageContainer}> <p className="text-center text-muted-foreground mt-4"> Swipe right for "Yay" or left for "Nay" to rate fashion looks </p> <div className={styles.statsContainer}> <div className={styles.statsItem}> <ThumbsUp className="text-green-500" size={18} /> <span className={styles.statsValue}>{stats.yayCount}</span> <span className={styles.statsLabel}>Yays</span> </div> <div className={styles.statsItem}> <Activity size={18} className="text-blue-500" /> <span className={styles.statsValue}>{yayPercentage}%</span> <span className={styles.statsLabel}>Yay Ratio</span> </div> <div className={styles.statsItem}> <ThumbsDown className="text-red-500" size={18} /> <span className={styles.statsValue}>{stats.nayCount}</span> <span className={styles.statsLabel}>Nays</span> </div> </div> {loading ? ( <div className="flex justify-center items-center min-h-[300px]"> <Loader2 className="h-8 w-8 animate-spin text-primary" /> </div> ) : ( <YayOrNayGrid items={items} onVote={handleVote} /> )} </div> <BottomNav /> </div> ); } 