import { Navigation } from "@/components/layout/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Loader2, Send } from "lucide-react";
import type { Look } from "@/shared/schema";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { BottomNav } from "@/components/layout/bottom-nav"; interface Comment { id: number; text: string; username: string;
} export default function CrowdPage() { const [comments, setComments] = useState<Record<string, Comment[]>>({}); const [newComment, setNewComment] = useState(""); const [commentInputs, setCommentInputs] = useState<Record<string, string>>({}); const { data: looks, isLoading } = useQuery<Look[]>({ queryKey: ["/api/looks"], }); const handleComment = (lookId: string) => { if (!commentInputs[lookId]?.trim()) return; setComments((prev) => ({ ...prev, [lookId]: [ ...(prev[lookId] || []), { id: Date.now(), text: commentInputs[lookId], username: "You", }, ], })); setCommentInputs(prev => ({ ...prev, [lookId]: '' })); }; if (isLoading) { return ( <div className="min-h-screen bg-background"> <Navigation /> <div className="flex justify-center items-center min-h-[300px] md:min-h-[400px]"> <Loader2 className="h-8 w-8 animate-spin text-primary" /> </div> <BottomNav /> </div> ); } return ( <div className="min-h-screen bg-background pb-16"> <Navigation /> <main className="container py-4 md:py-8"> <div className="space-y-4 md:space-y-8"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {(looks || []).map((look) => ( <Card key={look.look_id}> <CardContent className="p-4"> <div className="space-y-4"> <div className="aspect-square relative rounded-md overflow-hidden"> <img src={look.image_url} alt={look.caption || "Fashion look"} className="object-cover w-full h-full" /> </div> <div> <h3 className="font-semibold mb-2"> {look.caption || "Ask the crowd"} </h3> <div className="space-y-3"> <h4 className="text-sm font-medium text-muted-foreground">Crowd Opinions</h4> <div className="max-h-32 overflow-y-auto space-y-2"> {comments[look.look_id]?.map((comment) => ( <div key={comment.id} className="bg-muted p-2 rounded text-sm"> <p className="text-xs font-medium mb-1">{comment.username}</p> <p>{comment.text}</p> </div> )) || ( <p className="text-sm text-muted-foreground">No opinions yet. Be the first!</p> )} </div> <div className="flex gap-2"> <Input type="text" placeholder="Add your opinion..." value={commentInputs[look.look_id] || ''} onChange={(e) => { setCommentInputs(prev => ({ ...prev, [look.look_id]: e.target.value })); }} /> <Button size="sm" onClick={() => handleComment(look.look_id)} > <Send className="h-4 w-4" /> </Button> </div> </div> </div> </div> </CardContent> </Card> ))} </div> </div> </main> <BottomNav /> </div> );
}