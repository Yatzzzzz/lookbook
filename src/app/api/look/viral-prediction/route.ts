import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'; import { cookies } from 'next/headers'; import { NextRequest, NextResponse } from 'next/server'; // POST /api/look/viral-prediction - Get AI prediction for viral potential export async function POST(request: NextRequest) { try { const cookieStore = cookies(); const supabase = createRouteHandlerClient({ cookies: () => cookieStore }); // Check if user is authenticated const { data: { session } } = await supabase.auth.getSession(); if (!session) { return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); } // Get look data from request const body = await request.json(); if (!body.look_id) { return NextResponse.json({ error: 'Look ID is required' }, { status: 400 }); } // Get the look data const { data: look, error: lookError } = await supabase .from('looks') .select('*') .eq('look_id', body.look_id) .single(); if (lookError) { return NextResponse.json({ error: lookError.message }, { status: 500 }); } // Just return a random score between 1-100 for now // In a real implementation, this would use an ML model or API const viralScore = Math.floor(Math.random() * 100) + 1; // Return prediction return NextResponse.json({ look_id: body.look_id, viral_score: viralScore, viral_potential: viralScore > 70 ? 'high' : viralScore > 40 ? 'medium' : 'low', factors: [ 'Image quality', 'Trend alignment', 'Color palette', 'Style uniqueness' ] }); } catch (error: unknown) { const err = error instanceof Error ? error.message : 'Unknown error'; console.error('Error in viral prediction:', err); return NextResponse.json({ error: err }, { status: 500 }); } } 