import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'; import { cookies } from 'next/headers'; import { NextRequest, NextResponse } from 'next/server'; import { v4 as uuidv4 } from 'uuid'; import { createClient } from '@supabase/supabase-js'; // Create a Supabase client with the service role key for admin privileges const adminSupabase = createClient( process.env.NEXT_PUBLIC_SUPABASE_URL || '', process.env.SUPABASE_SERVICE_ROLE_KEY || '', { auth: { autoRefreshToken: false, persistSession: false } } ); export async function POST(request: NextRequest) { try { console.log('File upload API called'); // Verify the user is authenticated const cookieStore = cookies(); const supabase = createServerComponentClient({ cookies: () => cookieStore }); const { data: { session } } = await supabase.auth.getSession(); if (!session?.user) { console.log('Unauthorized attempt to upload file'); return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); } // Parse as FormData const formData = await request.formData(); const file = formData.get('file') as File | null; const userId = formData.get('userId') as string | null; console.log('Received upload request:', { userId: userId, hasFile: !!file, fileName: file?.name, fileSize: file?.size }); if (!file) { return NextResponse.json({ error: 'No file uploaded' }, { status: 400 }); } if (!userId || userId !== session.user.id) { return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 }); } // Generate file path with user ID prefix const fileExt = file.name.split('.').pop(); const fileName = `${uuidv4()}.${fileExt}`; const filePath = `${userId}/${fileName}`; console.log('Uploading to path:', filePath); // Create file buffer from the file const buffer = await file.arrayBuffer(); // Upload file using admin client const { error } = await adminSupabase.storage .from('wardrobe') .upload(filePath, buffer, { cacheControl: '3600', contentType: file.type, upsert: false }); if (error) { console.error('Admin upload error:', error); return NextResponse.json({ error: error.message }, { status: 500 }); } // Get public URL const { data } = adminSupabase.storage .from('wardrobe') .getPublicUrl(filePath); console.log('File successfully uploaded:', data.publicUrl); return NextResponse.json({ publicUrl: data.publicUrl }); } catch (err: any) { console.error('Server error during file upload:', err); return NextResponse.json( { error: 'Internal server error', details: err.message }, { status: 500 } ); } } 