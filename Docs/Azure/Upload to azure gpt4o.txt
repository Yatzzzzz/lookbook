'use client'
import { useEffect, useRef, useState } from 'react'
import { useRouter } from 'next/navigation'
import { safeStoreItem, safeGetItem } from '@/app/utils/storage'

export default function UploadPage() {
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const fileRef = useRef(null)
  const [preview, setPreview] = useState(null)
  const [tags, setTags] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [mode, setMode] = useState('tag')
  const [cameraActive, setCameraActive] = useState(false)
  const [manualTagInput, setManualTagInput] = useState('')
  const [showManualTags, setShowManualTags] = useState(false)
  const [usingAzure, setUsingAzure] = useState(true) // Flag to indicate using Azure OpenAI
  const router = useRouter()

  const startCamera = async () => {
    try {
      setError(null)
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' }  // Prefer back camera if available
      })
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream
        
        // Set camera as active once the video element loads the stream
        videoRef.current.onloadedmetadata = () => {
          console.log('Camera stream initialized')
          setCameraActive(true)
        }
      }
    } catch (err) {
      console.error('Camera error:', err)
      setError('Camera access denied or not available. Please try file upload instead.')
      setCameraActive(false)
    }
  }

  const stopCamera = () => {
    if (videoRef.current && videoRef.current.srcObject) {
      const tracks = videoRef.current.srcObject.getTracks()
      tracks.forEach(track => track.stop())
      videoRef.current.srcObject = null
      setCameraActive(false)
    }
  }

  const takePicture = () => {
    try {
      const video = videoRef.current
      const canvas = canvasRef.current
      
      if (!video || !canvas) {
        setError('Camera not initialized. Please try starting the camera again.')
        return
      }

      if (!video.videoWidth) {
        setError('Camera stream not ready yet. Please wait a moment and try again.')
        return
      }
      
      const context = canvas.getContext('2d')
      if (!context) {
        setError('Could not get canvas context')
        return
      }
      
      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      context.drawImage(video, 0, 0)
      
      try {
        const dataUrl = canvas.toDataURL('image/jpeg')
        processImage(dataUrl)
        stopCamera()
      } catch (err) {
        setError('Failed to capture image')
        console.error('Canvas data URL error:', err)
      }
    } catch (err) {
      setError('Error taking picture')
      console.error('Take picture error:', err)
    }
  }

  const handleFile = (e) => {
    const file = e.target.files[0]
    if (!file) return
    
    setError(null)
    const reader = new FileReader()
    
    reader.onloadend = () => {
      processImage(reader.result)
    }
    
    reader.onerror = () => {
      setError('Failed to read the selected file')
    }
    
    reader.readAsDataURL(file)
  }

  const processImage = async (base64Image) => {
    setPreview(base64Image)
    setLoading(true)
    setError(null)
    setShowManualTags(false)
    
    // Extract the base64 part without the data:image prefix
    const imageBase64 = base64Image.includes(',') 
      ? base64Image.split(',')[1] 
      : base64Image
    
    try {
      console.log('Sending request to clothes-finder API with Azure OpenAI integration...')
      const res = await fetch('/api/clothes-finder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageBase64, mode })
      })
      
      const result = await res.json()
      console.log('API response:', result)
      
      if (!res.ok || result.error) {
        const errorMessage = result.error || `API error: ${res.status}`
        console.error('API error:', errorMessage)
        
        // For errors, show the exact error message
        if (result.userFriendlyError) {
          throw new Error(result.error)
        } else if (errorMessage.includes('quota')) {
          throw new Error('Azure OpenAI quota exceeded. Please try again later.')
        } else if (errorMessage.includes('model')) {
          throw new Error('AI model configuration issue. Please try again later.')
        } else if (errorMessage.includes('authentication') || errorMessage.includes('Access denied')) {
          throw new Error('Azure OpenAI authentication error. Please check your API key and endpoint configuration.')
        } else {
          throw new Error(`Error analyzing image: ${errorMessage}`)
        }
      }
      
      if (typeof result.tags === 'string') {
        // Split by line break if it's a string
        setTags(result.tags.split('\n').filter(item => item.trim()))
      } else {
        setTags(result.tags || [])
      }
    } catch (error) {
      console.error('Error processing image:', error)
      setError(error.message || 'Error analyzing image')
      setTags([])
      // Show manual tag option if AI analysis fails
      setShowManualTags(true)
      setUsingAzure(false)
    } finally {
      setLoading(false)
    }
  }

  const handleManualTagSubmit = (e) => {
    e.preventDefault()
    if (manualTagInput.trim()) {
      // Split by commas and remove any empty items
      const newTags = manualTagInput
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0)
      
      setTags(newTags)
      setManualTagInput('')
      setShowManualTags(false)
      setUsingAzure(false) // Not using Azure if manual tags are added
    }
  }

  // Clean up when component unmounts
  useEffect(() => {
    return () => {
      stopCamera()
    }
  }, [])

  const saveLook = () => {
    const saved = safeGetItem('looks')
    const looks = saved ? JSON.parse(saved) : []
    
    try {
      // Compress the image before saving to reduce storage requirements
      const compressImage = (dataUrl, maxWidth = 800) => {
        return new Promise((resolve, reject) => {
          const img = new Image()
          img.onload = () => {
            // Calculate new dimensions maintaining aspect ratio
            let width = img.width
            let height = img.height
            if (width > maxWidth) {
              height = (height * maxWidth) / width
              width = maxWidth
            }
            
            // Create canvas and resize image
            const canvas = document.createElement('canvas')
            canvas.width = width
            canvas.height = height
            const ctx = canvas.getContext('2d')
            ctx.drawImage(img, 0, 0, width, height)
            
            // Get compressed data URL with reduced quality
            const compressedDataUrl = canvas.toDataURL('image/jpeg', 0.6)
            resolve(compressedDataUrl)
          }
          img.onerror = reject
          img.src = dataUrl
        })
      }
      
      // First, try to remove oldest items if we have more than 5
      if (looks.length >= 5) {
        // Sort by timestamp and keep only the 4 most recent
        looks.sort((a, b) => b.timestamp - a.timestamp)
        looks.length = 4 // Keep only the 4 most recent
      }
      
      // Function to try saving
      const attemptSave = async (imageData) => {
        const newLook = { 
          image: imageData,
          tags, 
          timestamp: Date.now(),
          analyzedWith: usingAzure ? 'Azure OpenAI' : 'Manual Entry'
        }
        
        try {
          safeStoreItem('looks', JSON.stringify([...looks, newLook]))
          router.push('/gallery')
          return true
        } catch (storageError) {
          console.error('Storage error:', storageError)
          return false
        }
      }
      
      // Try to save with the original image first
      compressImage(preview)
        .then(async (compressedImage) => {
          const saved = await attemptSave(compressedImage)
          
          if (!saved) {
            // If still fails, try with a more aggressive compression
            const smallerImage = await compressImage(preview, 400)
            const secondAttempt = await attemptSave(smallerImage)
            
            if (!secondAttempt) {
              // If still failing, clear old data and try once more
              if (looks.length > 0) {
                looks.length = Math.max(looks.length - 2, 0) // Remove two oldest items
                const finalAttempt = await attemptSave(smallerImage)
                
                if (!finalAttempt) {
                  throw new Error("Storage quota exceeded. Try clearing your gallery first.")
                }
              } else {
                throw new Error("Storage quota exceeded. Your device may be low on storage.")
              }
            }
          }
        })
        .catch(error => {
          setError(error.message || "Failed to save look. Storage may be full.")
          console.error('Save error:', error)
        })
    } catch (error) {
      setError("Failed to save look. Storage may be full.")
      console.error('Save error:', error)
    }
  }

  return (
    <main>
      <h1>Upload Your Look</h1>

      {error && (
        <div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee', borderRadius: '5px', marginBottom: '15px' }}>
          <strong>Error:</strong> {error}
        </div>
      )}

      <div style={{ marginBottom: '15px' }}>
        <label>
          Mode:
          <select 
            value={mode} 
            onChange={(e) => setMode(e.target.value)}
            style={{ marginLeft: '10px', padding: '5px' }}
          >
            <option value="tag">Structured Tags</option>
            <option value="free">Free Description</option>
            <option value="raw">Raw (No Instruction)</option>
          </select>
        </label>
        <div style={{ fontSize: '0.85rem', color: '#555', marginTop: '5px' }}>
          Using Azure OpenAI for image analysis
        </div>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <div style={{ marginBottom: '10px' }}>
          {!cameraActive ? (
            <button 
              onClick={startCamera}
              style={{ 
                backgroundColor: '#007BFF', 
                color: 'white', 
                border: 'none', 
                padding: '10px 15px', 
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              📷 Start Camera
            </button>
          ) : (
            <div style={{ display: 'flex', gap: '10px' }}>
              <button 
                onClick={takePicture}
                style={{ 
                  backgroundColor: '#28A745', 
                  color: 'white', 
                  border: 'none', 
                  padding: '10px 15px', 
                  borderRadius: '5px',
                  cursor: 'pointer'
                }}
              >
                📸 Take Picture
              </button>
              <button 
                onClick={stopCamera}
                style={{ 
                  backgroundColor: '#DC3545', 
                  color: 'white', 
                  border: 'none', 
                  padding: '10px 15px', 
                  borderRadius: '5px',
                  cursor: 'pointer'
                }}
              >
                ⏹ Stop Camera
              </button>
            </div>
          )}
        </div>
        
        {cameraActive && (
          <div style={{ backgroundColor: '#e8f5e9', padding: '5px 10px', borderRadius: '4px', marginBottom: '10px' }}>
            ✅ Camera active - Ready to take picture
          </div>
        )}
        
        <video 
          ref={videoRef} 
          autoPlay 
          playsInline
          muted
          style={{ 
            width: '100%', 
            maxWidth: '100%', 
            display: cameraActive ? 'block' : 'none',
            borderRadius: '8px',
            backgroundColor: '#000'
          }}
        />
        <canvas ref={canvasRef} style={{ display: 'none' }} />
      </div>
      
      <div style={{ marginBottom: '20px' }}>
        <hr style={{ margin: '15px 0' }} />
        <p>Or upload from your device:</p>
        <label style={{ 
          display: 'inline-block',
          padding: '10px 15px',
          backgroundColor: '#f0f0f0',
          borderRadius: '5px',
          cursor: 'pointer'
        }}>
          📁 Choose Image File
          <input 
            type='file' 
            accept='image/*' 
            onChange={handleFile} 
            ref={fileRef}
            style={{ display: 'none' }}
          />
        </label>
      </div>

      <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
        <div>
          {preview && (
            <div style={{ marginBottom: '15px' }}>
              <h3>Image Preview:</h3>
              <img 
                src={preview} 
                alt="Preview" 
                style={{ 
                  width: '100%', 
                  maxWidth: '100%',
                  borderRadius: '8px',
                  border: '1px solid #ddd'
                }}
              />
            </div>
          )}
        </div>
        
        <div>
          {loading ? (
            <div style={{ 
              padding: '20px', 
              textAlign: 'center', 
              backgroundColor: '#f8f9fa',
              borderRadius: '8px'
            }}>
              <p>Analyzing image with Azure OpenAI...</p>
              <div style={{ 
                width: '50px', 
                height: '50px', 
                border: '5px solid #f3f3f3',
                borderTop: '5px solid #3498db',
                borderRadius: '50%',
                margin: '10px auto',
                animation: 'spin 2s linear infinite'
              }}></div>
              <style dangerouslySetInnerHTML={{
                __html: `
                  @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                  }
                `
              }} />
            </div>
          ) : (
            <div>
              {tags.length > 0 ? (
                <div style={{ 
                  padding: '15px', 
                  backgroundColor: '#f8f9fa',
                  borderRadius: '8px',
                  border: '1px solid #ddd'
                }}>
                  <h3>Detected Items:</h3>
                  <ul style={{ paddingLeft: '20px' }}>
                    {tags.map((tag, index) => (
                      <li key={index} style={{ marginBottom: '5px' }}>{tag}</li>
                    ))}
                  </ul>
                  {usingAzure && (
                    <div style={{ fontSize: '0.8rem', color: '#6c757d', marginTop: '10px' }}>
                      Analysis provided by Azure OpenAI
                    </div>
                  )}
                </div>
              ) : (
                preview && !error && (
                  <p style={{ padding: '10px', backgroundColor: '#fff3cd', borderRadius: '5px' }}>
                    No items detected. Try another image.
                  </p>
                )
              )}
              
              {showManualTags && (
                <div style={{ 
                  marginTop: '15px',
                  padding: '15px',
                  backgroundColor: '#f8f9fa',
                  borderRadius: '8px',
                  border: '1px solid #ddd'
                }}>
                  <h3>Add Tags Manually:</h3>
                  <form onSubmit={handleManualTagSubmit}>
                    <p>Separate tags with commas (e.g., "blue jeans, white t-shirt, black sneakers")</p>
                    <input
                      type="text"
                      value={manualTagInput}
                      onChange={(e) => setManualTagInput(e.target.value)}
                      placeholder="Enter tags separated by commas"
                      style={{ 
                        width: '100%', 
                        padding: '8px', 
                        marginBottom: '8px',
                        borderRadius: '4px',
                        border: '1px solid #ced4da'
                      }}
                    />
                    <button 
                      type="submit"
                      style={{ 
                        backgroundColor: '#6c757d',
                        color: 'white',
                        border: 'none',
                        padding: '8px 15px',
                        borderRadius: '4px',
                        cursor: 'pointer'
                      }}
                    >
                      Add Tags
                    </button>
                  </form>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {(tags.length > 0 || (preview && showManualTags)) && (
        <button 
          onClick={saveLook} 
          disabled={loading}
          style={{ 
            backgroundColor: '#28A745',
            color: 'white',
            border: 'none',
            padding: '12px 20px',
            borderRadius: '5px',
            cursor: 'pointer',
            marginTop: '20px',
            width: '100%',
            fontWeight: 'bold',
            fontSize: '1.1rem'
          }}
        >
          Post to Gallery
        </button>
      )}
    </main>
  )
}
